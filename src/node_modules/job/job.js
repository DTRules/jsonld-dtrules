/*jslint node: true, vars: true */
'use strict';

//#ChipEligibility Example Job Schema and Utilities

var jld = require('jld_util');

//##Type Identifiers

var j_t = {
    county: "http://type.chip_example.com/county",
    job: "http://type.chip_example.com/job",
    program: "http://type.chip_example.com/program",
    p_case: "http://type.chip_example.com/p_case",
    client: "http://type.chip_example.com/client",
    cs_income: "http://type.chip_example.com/cs_income",
    div_income: "http://type.chip_example.com/div_income",
    set_income: "http://type.chip_example.com/set_income",
    ss_income: "http://type.chip_example.com/ss_income",
    ssi_income: "http://type.chip_example.com/ssi_income",
    tip_income: "http://type.chip_example.com/tip_income",
    wa_income: "http://type.chip_example.com/wa_income",
    relationship: "http://type.chip_example.com/relationship",
    result: "http://type.chip_example.com/result",
    diagCode: "http://type.chip_example.com/diagCode",
    excludedIncome: "http://type.chip_example.com/excludedIncome",
    programLevel: "http://type.chip_example.com/programLevel",
    date: "http://type.chip_example.com/date",
    gender: "http://type.chip_example.com/gender"
};

//##Property Identifiers

var j_p = {
    currentDate: "http://property.chip_example.com/currentDate",
    effectiveDate: "http://property.chip_example.com/effectiveDate",
    program: "http://property.chip_example.com/program",
    p_case: "http://property.chip_example.com/p_case",
    clients: "http://property.chip_example.com/clients",
    parentOf: "http://property.chip_example.com/parentOf",
    childOf: "http://property.chip_example.com/childOf",
    siblingOf: "http://property.chip_example.com/siblingOf",
    results: "http://property.chip_example.com/results",
    incomes: "http://property.chip_example.com/incomes",
    notes: "http://property.chip_example.com/notes",
    applying: "http://property.chip_example.com/applying",
    disabled: "http://property.chip_example.com/disabled",
    eligible: "http://property.chip_example.com/eligible",
    eligibleForMedicaid: "http://property.chip_example.com/eligibleForMedicaid",
    livesAtResidence: "http://property.chip_example.com/livesAtResidence",
    pregnant: "http://property.chip_example.com/pregnant",
    uninsured: "http://property.chip_example.com/uninsured",
    validatedCitizenship: "http://property.chip_example.com/validatedCitizenship",
    validatedImmigrationStatus: "http://property.chip_example.com/validatedImmigrationStatus",
    lostInsuranceDate: "http://property.chip_example.com/lostInsuranceDate",
    age: "http://property.chip_example.com/age",
    client_fpl: "http://property.chip_example.com/client_fpl",
    expectedChildren: "http://property.chip_example.com/expectedChildren",
    incomeGroupCount: "http://property.chip_example.com/incomeGroupCount",
    totalGroupIncome: "http://property.chip_example.com/totalGroupIncome",
    totalIncome: "http://property.chip_example.com/totalIncome",
    genderCode: "http://property.chip_example.com/genderCode",
    programLevel: "http://property.chip_example.com/programLevel",
    earned: "http://property.chip_example.com/earned",
    amount: "http://property.chip_example.com/amount",
    client_id: "http://property.chip_example.com/client_id"
};

//##Constants

var FPL_Base = 867;
var FPL_PerAdditionalPerson = 300;
var DiagCodes = ["V2501", "V2502"];
var ExcludedIncomeTypes = [j_t.cs_income, j_t.ssi_income];

//j_t:county values
var county = {
    AA: 'AA',
    AK: 'AK',
    AR: 'AR',
    BC: 'BC',
    BK: 'BK',
    BT: 'BT',
    CO: 'CO',
    CR: 'CR',
    LO: 'LO',
    TX: 'TX',
    XR: 'XR',
    XO: 'XO',
    XX: 'XX'
};

var CHIPCoveredCounties = [
    county.AA, county.AK, county.AR, county.BC, county.BK, county.BT, county.CO, county.CR, county.LO, county.TX, county.XR, county.XO, county.XX
];

//j_t:program values
var CHIP = 'CHIP';
var FOODSTAMPS = 'FOODSTAMPS';
var MEDICAID = 'MEDICAID';
var FS = 'FS';

//j_t:relationship values
var child = 'child';
var parent = 'parent';
var sibling = 'sibling';

//j_t:programLevel values
var AtCostCoverage = 'AtCostCoverage';
var FreeCoverage = 'FreeCoverage';
var LowCostCoverage = 'LowCostCoverage';

function uninsuredFor(job, client, days) {
    var currentDate, lostInsuranceDate;

    function getDaysBetweenDates(d0, d1) {

        var msPerDay = 8.64e7;

        // Copy dates so don't mess them up
        var x0 = new Date(d0);
        var x1 = new Date(d1);

        // Set to noon - avoid DST errors
        x0.setHours(12, 0, 0);
        x1.setHours(12, 0, 0);

        // Round to remove daylight saving errors
        return Math.round((x1 - x0) / msPerDay);
    } //getDaysBetweenDates

    currentDate = jld.getV(job, j_p.currentDate);
    lostInsuranceDate = jld.getV(client, j_p.lostInsuranceDate);
    if (currentDate && lostInsuranceDate) {
        if (getDaysBetweenDates(lostInsuranceDate, currentDate) >= days) {
            return true;
        }
    }
} //uninsuredFor

module.exports = {
    j_t: j_t,
    j_p: j_p,
    FPL_Base: FPL_Base,
    FPL_PerAdditionalPerson: FPL_PerAdditionalPerson,
    DiagCodes: DiagCodes,
    ExcludedIncomeTypes: ExcludedIncomeTypes,
    county: county,
    CHIPCoveredCounties: CHIPCoveredCounties,
    CHIP: CHIP,
    FOODSTAMPS: FOODSTAMPS,
    MEDICAID: MEDICAID,
    FS: FS,
    child: child,
    parent: parent,
    sibling: sibling,
    AtCostCoverage: AtCostCoverage,
    FreeCoverage: FreeCoverage,
    LowCostCoverage: LowCostCoverage,
    uninsuredFor: uninsuredFor
};
