//Copyright 2014 Resilient Network Systems, Inc.
//
//Licensed under the Apache License, Version 2.0 (the "License");  
//you may not use this file except in compliance with the License.  
//You may obtain a copy of the License at  
//
//     http://www.apache.org/licenses/LICENSE-2.0  
//
//Unless required by applicable law or agreed to in writing, software  
//distributed under the License is distributed on an "AS IS" BASIS,  
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
//See the License for the specific language governing permissions and  
//limitations under the License. 
//
//#JSON LD Decision Tables 
//##Draft 10/17/14
//
//This is a design for JSON LD Decision Tables that has been derived from DTRules. 
//It defines the design of a DT in the native form of a JSON LD graph. It is designed 
//to support direct transformation from/to a spreadsheet or other DT presentation 
//format.
//
//This design assumes that the data that DTs evaluate is in the form of JSON. In many 
//cases, the data is expected to be in the form of JSON LD graphs. Since JSON LD graphs 
//are a little more complicated to access than generic JSON, a jld_util module 
//is provided to simplify DT's that work with these graphs. 
//
//##DT String Literals
//
//String literals in DTs must only use the single quote string delimiter. 
//The double quote string delimiter is reserved for use by the DT 
//compiler to delimit the string values it generates that contain 
//DT content. If a double quote is used by a DT, it will cause 
//compilation to fail. 
//
//##DT Variable Names
//
//Variable names in DTs must not start with the **dt_** prefix. 
//This prefix is reserved for use by the DT compiler.
//
//##Use of Require
//
//Because a DT is compiled in the context of the dt module, 
//the file context of the compiled DT function is the dt module's 
//directory context, not the directory context where the DT function is executed. 
//This means that when require is used in a DT, it can only access 
//modules that have been installed in the application context. 
//Require in a DT can't be used to load files from the local execution directory.
//
//##Console Log Actions
//
//The `console.log` function can't be used as an action. 
//For some unknown reason JS eval will not evaluate calls to this 
//function that contain variable references or function call invocations.
//
//##JSON LD and Node.js
//
//JSON LD is a technology for defining 'global', directed, acyclic graphs using JSON. 
//Graph ids, type identifiers and property identifiers are URIs. See the 
//JSON LD spec for more information.
//
//The term *graph* is used to mean a JSON LD graph. 
//
//The term *JS* is used to mean JavaScript as used within a Node.js environment. 
//
//###JSON LD Expand
//
//As defined by JSON LD, unexpanded graphs (graphs with prefixed identifiers) 
//and expanded graphs (graphs with uri identifiers) are semantically equivalent; 
//however, to simplify DT compilation, DT's must be expanded and JSON LD graphs 
//passed to compiled DTs as parameters must also be expanded. 
//
//Note that expand wraps its output with an array. This array must be removed 
//from DTs and DT parameter values before DTs are compiled or graphs are passed 
//as input to DTs.
//
//##DT Table Types
//
//+ **dt_t:balanced_dt** - a decision table that has an exhaustive 
//set of policies where only one should match
//+ **dt_t:first_dt** - an unbalanced decision table where evaluation stops when the 
//first matching policy is executed.
//+ **dt_t:all_dt** - an unbalanced decision table where all policies that match are executed; 
//however, each action is executed a maximum of one time, in the listed order, 
//regardless of how many policies select it.
//
//##DT Compilation
//
//A DT compiler accepts a JSON LD DT and generates a Node.js function that executes 
//its policies. While a DT can accept any form of JS data as input.
//
//A DT can effect its external context in two ways:
//
//+ **Parameter Update** - a DT's actions can change the graphs it's been 
//given as parameters
//+ **Function Side Effects** - DT's actions may invoke functions whose 
//side effects change the DT's external context
//
//While DT conditions may invoke functions, these functions must not have side effects. 
//It would break the DT abstraction if this were to occur. 
//
//##DTs are Synchronous
//
//DTs may only use synchronous functions. There is no support for the use of functions 
//that require callbacks or for use of events. One result of this restriction 
//is that data that a DT operates on must be loaded into memory prior to invoking the DT.
//
//##Inner DTs
//
//A DT may contain a set of inner DTs. Each inner DT must have a unique name 
//within the set. This name becomes a predefined variable in the main DT and 
//is initialized to the inner DT's executor function. Since all inner DTs are 
//in the scope of the main DT, all the DTs in the set can access the main DT 
//variables and can invoke the other inner DTs.
//
//##Parameters
//
//The `dt_p:parameters` property contains a list of value objects whose 
//`@type` is the JSON LD type of the parameter and whose `@value` is the name of the 
//parameter. The predefined `dt_t:json` type specifies that a parameter is generic JSON data.
//
//A DT may operate on a broad family of graphs depending on the DT's parameter 
//type and property dependencies.
//A reference to a non-existent parameter or variable is an error that abnormally terminates 
//DT execution and may result in an inconsistent external state.
//
//##Variables and Required Modules
//
//Each element of the `dt_p:variables` list defines a JS variable used by the DT. 
//A variable's initialization expression may contain literals; data from a parameter or variable; 
//or the result of a function (which includes the `require` function for importing Node modules).
//
//##Initial Actions
//
//Each element of the `dt_p:initial_actions` list contains a JS statement 
//which may be either a JS assignment statement or a function invocation.
//
//##For and For_Initial_Actions
//
//DTs provide a mechanism to iterate through arrays of data and evaluate the DT 
//policies within the inner-most loop of the iteration. This functionality 
//is supported with two properties:
//
//+ **dt_p:for_loops** - contains a list of nested dt_t:for_loops, each 
//with three properties:
//+ *dt_p:element* - the variable that is iteratively assigned each element of the loop array
//+ *dt_p:array* - the array over which the loop iterates
//+ *dt_p:where* - a boolean expression that is evaluated for each loop iteration; 
//when false, it causes the iteration to skip evaluation of the DT; the for_loop property is optional
//+ **dt_p:for_initial_actions** - like *initial_action*; however, these actions are 
//executed at the beginning of each inner-most loop iteration
//
//##Conditions
//
//Each element of the `dt_p:conditions` list is a
//condition which must be a JS boolean expression or the special `otherwise` 
//condition (which must be the last condition). The boolean expression must not have 
//side effects. At least one condition must exist and this may be an 'otherwise'.
//
//##Actions
//
//Each element of the `dt_p:actions` list is an 
//action which must be either a JS assignment or function invocation statement.
//At least one action must exist.
//
//##Policies
//
//Each element of the `dt_p:policies` list is a `dt_t:policy` with `dt_p:condition_pattern` 
//and `dt_p:action_selector` properties.
//
//###Condition Matching
//
//A `dt_t:condition_pattern` is a string where each letter specifies the condition 
//match criteria for the condition at the index corresponding to the letter's position. 
//The condition match criteria must have one of the following values:
//
//+ **Y** - matches a true condition
//+ **N** - matches a false condition
//+ **space** - matches true and false conditions
//+ **\*** - the result value for the special `otherwise` condition that matches when no 
//other policy matches
//
//###Action Selection
//
//A `dt:_t:action_selector` is a string where each letter is a selector that specifies whether or not a 
//policy includes the action at the index corresponding to the letter's position. 
//The execution semantics of included actions depends on DT type.
//The action selector must have one of the following values:
//
//+ **X** - includes the corresponding action 
//+ **space** - does not include the corresponding action
//
//##Descriptions
//The parameters, variables, initial_actions, conditions, actions and policies lists each have optional, list-index-associated descriptions.
//

